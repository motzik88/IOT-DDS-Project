

/* actuatorSubscriber.java

A publication of data of type actuator

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type actuator automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java actuatorSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java actuatorPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class actuatorPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class actuatorSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class _DashboardApp {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private _DashboardApp() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        //Topic topic = null;
        //DataReaderListener listener = null;
        //actuatorDataReader actuatorReader = null;
        //startStopDataReader buttonReader = null;
        //tempSensorDataReader sensorReader = null;

        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic1 actuator --- // 

            /* Register type before creating topic */
            String actuatorTypeName = actuatorTypeSupport.get_type_name(); 
            actuatorTypeSupport.register_type(participant, actuatorTypeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            Topic actuatorTopic = participant.create_topic(
                "actuator",
                actuatorTypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (actuatorTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // --- Create reader1 actuator--- //

            actuatorListener actuatorListener = new actuatorListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            actuatorDataReader actuatorReader = (actuatorDataReader)
            subscriber.create_datareader(
                actuatorTopic, Subscriber.DATAREADER_QOS_DEFAULT, actuatorListener,
                StatusKind.STATUS_MASK_ALL);
            if (actuatorReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         

            // --- Create topic2 button --- //

            /* Register type before creating topic */
            String buttonTypeName = startStopTypeSupport.get_type_name(); 
            startStopTypeSupport.register_type(participant, buttonTypeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            Topic buttonTopic = participant.create_topic(
                "button",
                buttonTypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (buttonTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // --- Create reader2 --- //

            ButtonListener buttonListener = new ButtonListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            startStopDataReader buttonReader = (startStopDataReader)
            subscriber.create_datareader(
                buttonTopic, Subscriber.DATAREADER_QOS_DEFAULT, buttonListener,
                StatusKind.STATUS_MASK_ALL);
            if (buttonReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         

            // --- Create topic3 tempSensor --- //

            /* Register type before creating topic */
            String tempSensortypeName = tempSensorTypeSupport.get_type_name(); 
            tempSensorTypeSupport.register_type(participant, tempSensortypeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            Topic tempSensorTopic = participant.create_topic(
                "TempSensor",
                tempSensortypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (tempSensorTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // --- Create reader3 --- //

            TempSensorListener tempSensorListener = new TempSensorListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            tempSensorDataReader tempSensorReader = (tempSensorDataReader)
            subscriber.create_datareader(
                tempSensorTopic, Subscriber.DATAREADER_QOS_DEFAULT, tempSensorListener,
                StatusKind.STATUS_MASK_ALL);
            if (tempSensorReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         

            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
                System.out.println("actuator subscriber sleeping for "
                + receivePeriodSec + " sec...");

                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class actuatorListener extends DataReaderAdapter {

        actuatorSeq _dataSeq = new actuatorSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            actuatorDataReader actuatorReader =
            (actuatorDataReader)reader;
            System.out.println("inside class");
            try {
                System.out.println("inside try");

                actuatorReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    System.out.println("inside for");

                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println("inside valid data");

                        if (_dataSeq.get(i).status == 0) {
                        	System.out.println("Actuator " + _dataSeq.get(i).Uid + " has stopped working");
                        }
                        if (_dataSeq.get(i).status == 1) {
                        	System.out.println("Actuator " + _dataSeq.get(i).Uid + " is degraded");
                        }
                        if (_dataSeq.get(i).status == 2) {
                        	System.out.println("Actuator " + _dataSeq.get(i).Uid + " is working");
                        }

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                actuatorReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
    private static class ButtonListener extends DataReaderAdapter {
    	
        startStopSeq _dataSeq = new startStopSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();
        
       // actuator actuatorInstance = new actuator();

        public void on_data_available(DataReader reader) {
            startStopDataReader startStopReader =
            (startStopDataReader)reader;

            try {
                startStopReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                       // System.out.println(
                         //   ((startStop)_dataSeq.get(i)).toString("Received",0));
                     /*   if (_dataSeq.get(i).button == 0) {
                        	System.out.println("Shut Down");
                        	
                        	
                        } 
                        if (_dataSeq.get(i).button == 1) {
                        	System.out.println("Back On");
                        	
                        } */
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                startStopReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
    
    private static class TempSensorListener extends DataReaderAdapter {

        tempSensorSeq _dataSeq = new tempSensorSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();
        //String param_list[] = {"10", "60"};
        //StringSeq parameters = new StringSeq(java.util.Arrays.asList(param_list));
        
      
        public void on_data_available(DataReader reader) {
            tempSensorDataReader tempSensorReader =
            (tempSensorDataReader)reader;

            try {
                tempSensorReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                    	
                       // System.out.println(
                         //   ((tempSensor)_dataSeq.get(i)).toString("Received",0));
                        if ((_dataSeq.get(i).temp < 20 || _dataSeq.get(i).temp > 40) ) {
                        	System.out.println("Extreme Temperature Detected:");
                        	System.out.println(_dataSeq.get(i).temp);
                        }

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                tempSensorReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
}

