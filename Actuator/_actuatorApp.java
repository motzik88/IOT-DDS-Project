

/* actuatorSubscriber.java

A publication of data of type actuator

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type actuator automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java actuatorSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java actuatorPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class actuatorPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class actuatorSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Scanner;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.Publisher;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class _actuatorApp {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private _actuatorApp() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

    	//publisher var
        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic topicAct = null;
        actuatorDataWriter writer = null;
        Scanner sc = new Scanner(System.in);

        // subscriber var
        Subscriber subscriber = null;
        Topic topicSensor = null;
        Topic topicBtn = null;
      //  DataReaderListener listener = null;
        tempSensorDataReader sensorReader = null;
        startStopDataReader btnReader = null;

        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }
            
            actuator instance = new actuator();
            
            // --- Create publisher --- //

            /* To customize publisher QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            publisher = participant.create_publisher(
                DomainParticipant.PUBLISHER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = actuatorTypeSupport.get_type_name(); 
            actuatorTypeSupport.register_type(participant, typeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            topicAct = participant.create_topic(
                "actuator",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topicAct == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            // --- Create topic btn & sensor --- //

            /* Register type before creating topic */
            String typeSensor = tempSensorTypeSupport.get_type_name(); 
            tempSensorTypeSupport.register_type(participant, typeSensor);

            
            /* Register type before creating topic */
            String typeBtn = startStopTypeSupport.get_type_name(); 
            startStopTypeSupport.register_type(participant, typeBtn);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            topicSensor = participant.create_topic(
                "TempSensor",
                typeSensor, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topicSensor == null) {
                System.err.println("create_topic error\n");
                return;
            }   
            
            topicBtn = participant.create_topic(
                    "button",
                    typeBtn, DomainParticipant.TOPIC_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
                if (topicBtn == null) {
                    System.err.println("create_topic error\n");
                    return;
                }  
                
             // --- Create writer --- //

                /* To customize data writer QoS, use
                the configuration file USER_QOS_PROFILES.xml */

                writer = (actuatorDataWriter)
                publisher.create_datawriter(
                		topicAct, Publisher.DATAWRITER_QOS_DEFAULT,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
                if (writer == null) {
                    System.err.println("create_datawriter error\n");
                    return;
                }   

            // --- Create reader --- //

            tempSensorListener listener = new tempSensorListener();
            listener.insertInstance(instance);
            ButtonListener btnListener = new ButtonListener();
            btnListener.insertInstance(instance);


            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            sensorReader = (tempSensorDataReader)
                    subscriber.create_datareader(
                        topicSensor, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                        StatusKind.STATUS_MASK_ALL);
                    if (sensorReader == null) {
                        System.err.println("create_datareader error\n");
                        return;
                    }           
            
            btnReader = (startStopDataReader)
                    subscriber.create_datareader(
                    		topicBtn, Subscriber.DATAREADER_QOS_DEFAULT, btnListener,
                        StatusKind.STATUS_MASK_ALL);
                    if (btnReader == null) {
                        System.err.println("create_datareader error\n");
                        return;
                    }    

            // --- Wait for data --- //
                    
            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;

            final long receivePeriodSec = 4;
            
         // Get ID from user
            System.out.println("Please enter Actuator Unique ID");
            //instance.id = sc.nextInt();
            instance.Uid = 77;                         // The system shall work without any dependency of the initialization order of its components.
            
            int previousStatus = instance.status;

            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
            	
            	if(instance.status != previousStatus) {
            		System.out.println("Writing Actuator, count " + count);

                    /* Modify the instance to be written here */
                    previousStatus = instance.status;
                    /* Write data */
                    writer.write(instance, instance_handle);
        	}       
                System.out.println("actuator subscriber sleeping for "
                + receivePeriodSec + " sec...");

                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class actuatorListener extends DataReaderAdapter {

        actuatorSeq _dataSeq = new actuatorSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            actuatorDataReader actuatorReader =
            (actuatorDataReader)reader;

            try {
                actuatorReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(
                            ((actuator)_dataSeq.get(i)).toString("Received",0));

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                actuatorReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
    private static class ButtonListener extends DataReaderAdapter {

        startStopSeq _dataSeq = new startStopSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();
        
        //Create Actuator for changing status
        actuator instance = new actuator();
        
        // Insert instance from the main function
        public void insertInstance(actuator OutInstance) {
        	instance = OutInstance;
        }
        
        public void buttonChangeStatus(int command) {
        	//Command to stop
        	if (command == 0) {
        		instance.status = 0;        		
        		return;
        	}
        	//Command to start
        	if (command == 1) {
        		instance.status = 2;        		
        		return;
        	}
        }
        
        public void on_data_available(DataReader reader) {
            startStopDataReader ButtonReader =
            (startStopDataReader)reader;

            try {
                ButtonReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(
                            ((startStop)_dataSeq.get(i)).toString("Received",0));
                        buttonChangeStatus(_dataSeq.get(i).button);
                        //System.out.println("Foreign object: " + (_dataSeq.get(i)));
                        //System.out.println("Sent Command: " + _dataSeq.get(i).command);
                        System.out.println("Actuator status: " + instance.status);

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                ButtonReader.return_loan(_dataSeq, _infoSeq);
            }
        }
        
    }
            
            private static class tempSensorListener extends DataReaderAdapter {

                tempSensorSeq _dataSeq = new tempSensorSeq();
                SampleInfoSeq _infoSeq = new SampleInfoSeq();
                
                //Create Actuator for changing status
                actuator instance = new actuator();
                
                // Insert instance from the main function
                public void insertInstance(actuator OutInstance) {
                	instance = OutInstance;
                }
                
                public void changeStatusSensor(long temperature) {
                	if ((temperature < 20 || temperature > 40) && instance.status==2) {
                		instance.status = 1;
                		return;
                	}
                	if (temperature >= 20 && temperature <= 40 && instance.status==1) {
                		instance.status = 2;
                		return;
                	}
                }

                public void on_data_available(DataReader reader) {
                    tempSensorDataReader SensorReader =
                    (tempSensorDataReader)reader;

                    try {
                        SensorReader.take(
                            _dataSeq, _infoSeq,
                            ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                            SampleStateKind.ANY_SAMPLE_STATE,
                            ViewStateKind.ANY_VIEW_STATE,
                            InstanceStateKind.ANY_INSTANCE_STATE);

                        for(int i = 0; i < _dataSeq.size(); ++i) {
                            SampleInfo info = (SampleInfo)_infoSeq.get(i);

                            if (info.valid_data) {
                                System.out.println(
                                    ((tempSensor)_dataSeq.get(i)).toString("Received",0));
                                changeStatusSensor(_dataSeq.get(i).temp);
                                System.out.println("Actuator status: " + instance.status);

                            }
                        }
                    } catch (RETCODE_NO_DATA noData) {
                        // No data to process
                    } finally {
                        SensorReader.return_loan(_dataSeq, _infoSeq);
                    }
                }
            }
}
       
          


